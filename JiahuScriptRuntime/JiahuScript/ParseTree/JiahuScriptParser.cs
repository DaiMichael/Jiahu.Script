//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\..\JiahuScript\Grammar\JiahuScript.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class JiahuScriptParser : Parser {
	public const int
		NUMBERS=1, NONE_NUMBER_VALUES=2, TYPE=3, ARRAY=4, DOUBLE=5, NULL=6, BOOL=7, 
		STRING=8, INT=9, DECIMAL=10, DATE=11, DATETIME=12, OBJECT=13, FUNCTION=14, 
		VOID=15, PRINT=16, IF=17, ELSE=18, WHILE=19, SWITCH=20, CASE=21, DEFAULT=22, 
		RETURN=23, FOREACH=24, BREAK=25, IN=26, FALSE=27, TRUE=28, OPEN_BRACE=29, 
		CLOSE_BRACE=30, OPEN_BRACKET=31, CLOSE_BRACKET=32, OPEN_PARENS=33, CLOSE_PARENS=34, 
		COMMA=35, COLON=36, QUESTION=37, PLUS=38, MINUS=39, TIMES=40, DIV=41, 
		PLUSPLUS=42, MINUSMINUS=43, NOT=44, NOT_EQUAL=45, LESS_OR_EQUAL=46, GREATER_OR_EQUAL=47, 
		GREATER_THAN=48, LESS_THAN=49, EQUAL=50, ASSIGN=51, DOT=52, AMPERSAND=53, 
		AND=54, OR=55, LINE_COMMENT=56, COMMENT=57, WS=58, FUNCID=59, ID=60;
	public const int
		RULE_script = 0, RULE_funcDec = 1, RULE_funcParams = 2, RULE_funcParam = 3, 
		RULE_stat = 4, RULE_print = 5, RULE_break = 6, RULE_switchStat = 7, RULE_caseBlock = 8, 
		RULE_defaultBlock = 9, RULE_whileStat = 10, RULE_ifStat = 11, RULE_foreachStat = 12, 
		RULE_returnStat = 13, RULE_block = 14, RULE_variableDec = 15, RULE_variableDecAssign = 16, 
		RULE_assignment = 17, RULE_arrayInitaliser = 18, RULE_objectCall = 19, 
		RULE_objectCallList = 20, RULE_functionCall = 21, RULE_functionList = 22, 
		RULE_expr = 23, RULE_arrayIndexer = 24, RULE_arrayAccessor = 25, RULE_definedType = 26, 
		RULE_value = 27, RULE_identifier = 28, RULE_number = 29, RULE_sign = 30, 
		RULE_noneNumber = 31;
	public static readonly string[] ruleNames = {
		"script", "funcDec", "funcParams", "funcParam", "stat", "print", "break", 
		"switchStat", "caseBlock", "defaultBlock", "whileStat", "ifStat", "foreachStat", 
		"returnStat", "block", "variableDec", "variableDecAssign", "assignment", 
		"arrayInitaliser", "objectCall", "objectCallList", "functionCall", "functionList", 
		"expr", "arrayIndexer", "arrayAccessor", "definedType", "value", "identifier", 
		"number", "sign", "noneNumber"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'double'", "'null'", "'bool'", "'string'", 
		"'int'", "'decimal'", "'date'", "'datetime'", "'object'", "'function'", 
		"'void'", "'print'", "'if'", "'else'", "'while'", "'switch'", "'case'", 
		"'default'", "'return'", "'foreach'", "'break'", "'in'", null, null, "'{'", 
		"'}'", "'['", "']'", "'('", "')'", "','", "':'", "'?'", "'+'", "'-'", 
		"'*'", "'/'", "'++'", "'--'", "'!'", "'!='", "'<='", "'>='", "'>'", "'<'", 
		"'=='", "'='", "'.'", "'&'", "'&&'", "'||'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBERS", "NONE_NUMBER_VALUES", "TYPE", "ARRAY", "DOUBLE", "NULL", 
		"BOOL", "STRING", "INT", "DECIMAL", "DATE", "DATETIME", "OBJECT", "FUNCTION", 
		"VOID", "PRINT", "IF", "ELSE", "WHILE", "SWITCH", "CASE", "DEFAULT", "RETURN", 
		"FOREACH", "BREAK", "IN", "FALSE", "TRUE", "OPEN_BRACE", "CLOSE_BRACE", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", "CLOSE_PARENS", "COMMA", 
		"COLON", "QUESTION", "PLUS", "MINUS", "TIMES", "DIV", "PLUSPLUS", "MINUSMINUS", 
		"NOT", "NOT_EQUAL", "LESS_OR_EQUAL", "GREATER_OR_EQUAL", "GREATER_THAN", 
		"LESS_THAN", "EQUAL", "ASSIGN", "DOT", "AMPERSAND", "AND", "OR", "LINE_COMMENT", 
		"COMMENT", "WS", "FUNCID", "ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JiahuScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public JiahuScriptParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ScriptContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public FuncDecContext[] funcDec() {
			return GetRuleContexts<FuncDecContext>();
		}
		public FuncDecContext funcDec(int i) {
			return GetRuleContext<FuncDecContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 66;
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 64; stat();
					}
					break;
				case 2:
					{
					State = 65; funcDec();
					}
					break;
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBERS) | (1L << NONE_NUMBER_VALUES) | (1L << TYPE) | (1L << ARRAY) | (1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << SWITCH) | (1L << RETURN) | (1L << FOREACH) | (1L << BREAK) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << MINUS) | (1L << NOT) | (1L << FUNCID) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDecContext : ParserRuleContext {
		public DefinedTypeContext definedType() {
			return GetRuleContext<DefinedTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(JiahuScriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(JiahuScriptParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncParamsContext[] funcParams() {
			return GetRuleContexts<FuncParamsContext>();
		}
		public FuncParamsContext funcParams(int i) {
			return GetRuleContext<FuncParamsContext>(i);
		}
		public FuncDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncDecContext funcDec() {
		FuncDecContext _localctx = new FuncDecContext(Context, State);
		EnterRule(_localctx, 2, RULE_funcDec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; definedType();
			State = 71; identifier();
			State = 72; Match(OPEN_PARENS);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TYPE || _la==ARRAY) {
				{
				{
				State = 73; funcParams();
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 79; Match(CLOSE_PARENS);
			State = 80; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamsContext : ParserRuleContext {
		public FuncParamContext[] funcParam() {
			return GetRuleContexts<FuncParamContext>();
		}
		public FuncParamContext funcParam(int i) {
			return GetRuleContext<FuncParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JiahuScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JiahuScriptParser.COMMA, i);
		}
		public FuncParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParams; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamsContext funcParams() {
		FuncParamsContext _localctx = new FuncParamsContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; funcParam();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 83; Match(COMMA);
				State = 84; funcParam();
				}
				}
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParamContext : ParserRuleContext {
		public DefinedTypeContext definedType() {
			return GetRuleContext<DefinedTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FuncParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncParamContext funcParam() {
		FuncParamContext _localctx = new FuncParamContext(Context, State);
		EnterRule(_localctx, 6, RULE_funcParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; definedType();
			State = 91; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public BreakContext @break() {
			return GetRuleContext<BreakContext>(0);
		}
		public SwitchStatContext switchStat() {
			return GetRuleContext<SwitchStatContext>(0);
		}
		public WhileStatContext whileStat() {
			return GetRuleContext<WhileStatContext>(0);
		}
		public IfStatContext ifStat() {
			return GetRuleContext<IfStatContext>(0);
		}
		public ForeachStatContext foreachStat() {
			return GetRuleContext<ForeachStatContext>(0);
		}
		public ReturnStatContext returnStat() {
			return GetRuleContext<ReturnStatContext>(0);
		}
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public VariableDecAssignContext variableDecAssign() {
			return GetRuleContext<VariableDecAssignContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 8, RULE_stat);
		try {
			State = 104;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; print();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; @break();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 96; switchStat();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 97; whileStat();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 98; ifStat();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 99; foreachStat();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 100; returnStat();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 101; assignment();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 102; variableDecAssign();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 103; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(JiahuScriptParser.PRINT, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(JiahuScriptParser.OPEN_PARENS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(JiahuScriptParser.CLOSE_PARENS, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 10, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(PRINT);
			State = 107; Match(OPEN_PARENS);
			State = 108; expr(0);
			State = 109; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(JiahuScriptParser.BREAK, 0); }
		public BreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakContext @break() {
		BreakContext _localctx = new BreakContext(Context, State);
		EnterRule(_localctx, 12, RULE_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(JiahuScriptParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(JiahuScriptParser.OPEN_PARENS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(JiahuScriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(JiahuScriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(JiahuScriptParser.CLOSE_BRACE, 0); }
		public CaseBlockContext[] caseBlock() {
			return GetRuleContexts<CaseBlockContext>();
		}
		public CaseBlockContext caseBlock(int i) {
			return GetRuleContext<CaseBlockContext>(i);
		}
		public DefaultBlockContext defaultBlock() {
			return GetRuleContext<DefaultBlockContext>(0);
		}
		public SwitchStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatContext switchStat() {
		SwitchStatContext _localctx = new SwitchStatContext(Context, State);
		EnterRule(_localctx, 14, RULE_switchStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(SWITCH);
			State = 114; Match(OPEN_PARENS);
			State = 115; expr(0);
			State = 116; Match(CLOSE_PARENS);
			State = 117; Match(OPEN_BRACE);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 118; caseBlock();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==CASE );
			State = 124;
			_la = TokenStream.La(1);
			if (_la==DEFAULT) {
				{
				State = 123; defaultBlock();
				}
			}

			State = 126; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(JiahuScriptParser.CASE, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(JiahuScriptParser.COLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_caseBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(CASE);
			State = 129; value();
			State = 130; Match(COLON);
			State = 131; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultBlockContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(JiahuScriptParser.DEFAULT, 0); }
		public ITerminalNode COLON() { return GetToken(JiahuScriptParser.COLON, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public DefaultBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultBlockContext defaultBlock() {
		DefaultBlockContext _localctx = new DefaultBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_defaultBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(DEFAULT);
			State = 134; Match(COLON);
			State = 135; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(JiahuScriptParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(JiahuScriptParser.OPEN_PARENS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(JiahuScriptParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatContext whileStat() {
		WhileStatContext _localctx = new WhileStatContext(Context, State);
		EnterRule(_localctx, 20, RULE_whileStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137; Match(WHILE);
			State = 138; Match(OPEN_PARENS);
			State = 139; expr(0);
			State = 140; Match(CLOSE_PARENS);
			State = 141; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatContext : ParserRuleContext {
		public BlockContext ifBlock;
		public BlockContext elseBlock;
		public ITerminalNode IF() { return GetToken(JiahuScriptParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(JiahuScriptParser.OPEN_PARENS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(JiahuScriptParser.CLOSE_PARENS, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(JiahuScriptParser.ELSE, 0); }
		public IfStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatContext ifStat() {
		IfStatContext _localctx = new IfStatContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifStat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(IF);
			State = 144; Match(OPEN_PARENS);
			State = 145; expr(0);
			State = 146; Match(CLOSE_PARENS);
			State = 147; _localctx.ifBlock = block();
			State = 150;
			_la = TokenStream.La(1);
			if (_la==ELSE) {
				{
				State = 148; Match(ELSE);
				State = 149; _localctx.elseBlock = block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(JiahuScriptParser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(JiahuScriptParser.OPEN_PARENS, 0); }
		public VariableDecContext variableDec() {
			return GetRuleContext<VariableDecContext>(0);
		}
		public ITerminalNode IN() { return GetToken(JiahuScriptParser.IN, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(JiahuScriptParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ArrayInitaliserContext arrayInitaliser() {
			return GetRuleContext<ArrayInitaliserContext>(0);
		}
		public ObjectCallContext objectCall() {
			return GetRuleContext<ObjectCallContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ForeachStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatContext foreachStat() {
		ForeachStatContext _localctx = new ForeachStatContext(Context, State);
		EnterRule(_localctx, 24, RULE_foreachStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(FOREACH);
			State = 153; Match(OPEN_PARENS);
			State = 154; variableDec();
			State = 155; Match(IN);
			State = 160;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 156; arrayInitaliser();
				}
				break;
			case 2:
				{
				State = 157; objectCall();
				}
				break;
			case 3:
				{
				State = 158; functionCall();
				}
				break;
			case 4:
				{
				State = 159; identifier();
				}
				break;
			}
			State = 162; Match(CLOSE_PARENS);
			State = 163; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(JiahuScriptParser.RETURN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStat; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatContext returnStat() {
		ReturnStatContext _localctx = new ReturnStatContext(Context, State);
		EnterRule(_localctx, 26, RULE_returnStat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(RETURN);
			State = 167;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 166; expr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(JiahuScriptParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(JiahuScriptParser.CLOSE_BRACE, 0); }
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(OPEN_BRACE);
			State = 175;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBERS) | (1L << NONE_NUMBER_VALUES) | (1L << TYPE) | (1L << ARRAY) | (1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << SWITCH) | (1L << RETURN) | (1L << FOREACH) | (1L << BREAK) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << MINUS) | (1L << NOT) | (1L << FUNCID) | (1L << ID))) != 0)) {
				{
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 170; stat();
					}
					}
					State = 173;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBERS) | (1L << NONE_NUMBER_VALUES) | (1L << TYPE) | (1L << ARRAY) | (1L << PRINT) | (1L << IF) | (1L << WHILE) | (1L << SWITCH) | (1L << RETURN) | (1L << FOREACH) | (1L << BREAK) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << MINUS) | (1L << NOT) | (1L << FUNCID) | (1L << ID))) != 0) );
				}
			}

			State = 177; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDecContext : ParserRuleContext {
		public DefinedTypeContext definedType() {
			return GetRuleContext<DefinedTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableDecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDecContext variableDec() {
		VariableDecContext _localctx = new VariableDecContext(Context, State);
		EnterRule(_localctx, 30, RULE_variableDec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; definedType();
			State = 180; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDecAssignContext : ParserRuleContext {
		public VariableDecContext variableDec() {
			return GetRuleContext<VariableDecContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JiahuScriptParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDecAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDecAssign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDecAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDecAssignContext variableDecAssign() {
		VariableDecAssignContext _localctx = new VariableDecAssignContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDecAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; variableDec();
			State = 185;
			_la = TokenStream.La(1);
			if (_la==ASSIGN) {
				{
				State = 183; Match(ASSIGN);
				State = 184; expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(JiahuScriptParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187; identifier();
			State = 188; Match(ASSIGN);
			{
			State = 189; expr(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitaliserContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(JiahuScriptParser.OPEN_BRACE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(JiahuScriptParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JiahuScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JiahuScriptParser.COMMA, i);
		}
		public ArrayInitaliserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitaliser; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitaliser(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitaliserContext arrayInitaliser() {
		ArrayInitaliserContext _localctx = new ArrayInitaliserContext(Context, State);
		EnterRule(_localctx, 36, RULE_arrayInitaliser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(OPEN_BRACE);
			State = 192; expr(0);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 193; Match(COMMA);
				State = 194; expr(0);
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 200; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCallContext : ParserRuleContext {
		public IdentifierContext evalObject;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(JiahuScriptParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(JiahuScriptParser.DOT, i);
		}
		public ObjectCallListContext[] objectCallList() {
			return GetRuleContexts<ObjectCallListContext>();
		}
		public ObjectCallListContext objectCallList(int i) {
			return GetRuleContext<ObjectCallListContext>(i);
		}
		public ObjectCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCallContext objectCall() {
		ObjectCallContext _localctx = new ObjectCallContext(Context, State);
		EnterRule(_localctx, 38, RULE_objectCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; _localctx.evalObject = identifier();
			State = 205;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 203; Match(DOT);
					State = 204; objectCallList();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 207;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCallListContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ObjectCallListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCallList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectCallList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCallListContext objectCallList() {
		ObjectCallListContext _localctx = new ObjectCallListContext(Context, State);
		EnterRule(_localctx, 40, RULE_objectCallList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 209; functionCall();
				}
				break;
			case 2:
				{
				State = 210; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(JiahuScriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(JiahuScriptParser.CLOSE_PARENS, 0); }
		public FunctionListContext functionList() {
			return GetRuleContext<FunctionListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 42, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; identifier();
			State = 214; Match(OPEN_PARENS);
			State = 216;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBERS) | (1L << NONE_NUMBER_VALUES) | (1L << OPEN_BRACE) | (1L << OPEN_PARENS) | (1L << MINUS) | (1L << NOT) | (1L << FUNCID) | (1L << ID))) != 0)) {
				{
				State = 215; functionList();
				}
			}

			State = 218; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JiahuScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JiahuScriptParser.COMMA, i);
		}
		public FunctionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionListContext functionList() {
		FunctionListContext _localctx = new FunctionListContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; expr(0);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 221; Match(COMMA);
				State = 222; expr(0);
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		public ExprContext inlineTrue;
		public ExprContext inlineFalse;
		public ITerminalNode NOT() { return GetToken(JiahuScriptParser.NOT, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ObjectCallContext objectCall() {
			return GetRuleContext<ObjectCallContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ArrayIndexerContext arrayIndexer() {
			return GetRuleContext<ArrayIndexerContext>(0);
		}
		public ArrayInitaliserContext arrayInitaliser() {
			return GetRuleContext<ArrayInitaliserContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(JiahuScriptParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(JiahuScriptParser.CLOSE_PARENS, 0); }
		public ITerminalNode EQUAL() { return GetToken(JiahuScriptParser.EQUAL, 0); }
		public ITerminalNode NOT_EQUAL() { return GetToken(JiahuScriptParser.NOT_EQUAL, 0); }
		public ITerminalNode LESS_THAN() { return GetToken(JiahuScriptParser.LESS_THAN, 0); }
		public ITerminalNode LESS_OR_EQUAL() { return GetToken(JiahuScriptParser.LESS_OR_EQUAL, 0); }
		public ITerminalNode GREATER_THAN() { return GetToken(JiahuScriptParser.GREATER_THAN, 0); }
		public ITerminalNode GREATER_OR_EQUAL() { return GetToken(JiahuScriptParser.GREATER_OR_EQUAL, 0); }
		public ITerminalNode OR() { return GetToken(JiahuScriptParser.OR, 0); }
		public ITerminalNode AND() { return GetToken(JiahuScriptParser.AND, 0); }
		public ITerminalNode COLON() { return GetToken(JiahuScriptParser.COLON, 0); }
		public ITerminalNode QUESTION() { return GetToken(JiahuScriptParser.QUESTION, 0); }
		public ITerminalNode TIMES() { return GetToken(JiahuScriptParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(JiahuScriptParser.DIV, 0); }
		public ITerminalNode PLUS() { return GetToken(JiahuScriptParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(JiahuScriptParser.MINUS, 0); }
		public ITerminalNode AMPERSAND() { return GetToken(JiahuScriptParser.AMPERSAND, 0); }
		public ITerminalNode PLUSPLUS() { return GetToken(JiahuScriptParser.PLUSPLUS, 0); }
		public ITerminalNode MINUSMINUS() { return GetToken(JiahuScriptParser.MINUSMINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 229; _localctx.op = Match(NOT);
				State = 230; _localctx.right = expr(20);
				}
				break;
			case 2:
				{
				State = 231; functionCall();
				}
				break;
			case 3:
				{
				State = 232; objectCall();
				}
				break;
			case 4:
				{
				State = 233; identifier();
				}
				break;
			case 5:
				{
				State = 234; value();
				}
				break;
			case 6:
				{
				State = 235; arrayIndexer();
				}
				break;
			case 7:
				{
				State = 236; arrayInitaliser();
				}
				break;
			case 8:
				{
				State = 237; Match(OPEN_PARENS);
				State = 238; expr(0);
				State = 239; Match(CLOSE_PARENS);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 288;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 286;
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 243;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 244; _localctx.op = Match(EQUAL);
						State = 245; _localctx.right = expr(23);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 246;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 247; _localctx.op = Match(NOT_EQUAL);
						State = 248; _localctx.right = expr(22);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 249;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 250; _localctx.op = Match(LESS_THAN);
						State = 251; _localctx.right = expr(20);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 252;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 253; _localctx.op = Match(LESS_OR_EQUAL);
						State = 254; _localctx.right = expr(19);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 255;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 256; _localctx.op = Match(GREATER_THAN);
						State = 257; _localctx.right = expr(18);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 258;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 259; _localctx.op = Match(GREATER_OR_EQUAL);
						State = 260; _localctx.right = expr(17);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 261;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 262; _localctx.op = Match(OR);
						State = 263; _localctx.right = expr(16);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 264;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 265; _localctx.op = Match(AND);
						State = 266; _localctx.right = expr(15);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 267;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 268; _localctx.op = Match(QUESTION);
						State = 269; _localctx.inlineTrue = expr(0);
						State = 270; Match(COLON);
						State = 271; _localctx.inlineFalse = expr(12);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 273;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 274;
						_localctx.op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==TIMES || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 275; _localctx.right = expr(11);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 276;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 277;
						_localctx.op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 278; _localctx.right = expr(10);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 279;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 280; _localctx.op = Match(AMPERSAND);
						State = 281; _localctx.right = expr(3);
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 282;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 283; _localctx.op = Match(PLUSPLUS);
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 284;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 285; _localctx.op = Match(MINUSMINUS);
						}
						break;
					}
					} 
				}
				State = 290;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayIndexerContext : ParserRuleContext {
		public ArrayAccessorContext arrayAccessor() {
			return GetRuleContext<ArrayAccessorContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public ObjectCallContext objectCall() {
			return GetRuleContext<ObjectCallContext>(0);
		}
		public ArrayIndexerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayIndexer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndexer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayIndexerContext arrayIndexer() {
		ArrayIndexerContext _localctx = new ArrayIndexerContext(Context, State);
		EnterRule(_localctx, 48, RULE_arrayIndexer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 291; identifier();
				}
				break;
			case 2:
				{
				State = 292; functionCall();
				}
				break;
			case 3:
				{
				State = 293; objectCall();
				}
				break;
			}
			State = 296; arrayAccessor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayAccessorContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(JiahuScriptParser.OPEN_BRACKET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(JiahuScriptParser.CLOSE_BRACKET, 0); }
		public ArrayAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayAccessor; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayAccessorContext arrayAccessor() {
		ArrayAccessorContext _localctx = new ArrayAccessorContext(Context, State);
		EnterRule(_localctx, 50, RULE_arrayAccessor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298; Match(OPEN_BRACKET);
			State = 299; expr(0);
			State = 300; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinedTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(JiahuScriptParser.TYPE, 0); }
		public ITerminalNode ARRAY() { return GetToken(JiahuScriptParser.ARRAY, 0); }
		public DefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definedType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinedTypeContext definedType() {
		DefinedTypeContext _localctx = new DefinedTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_definedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = TokenStream.La(1);
			if ( !(_la==TYPE || _la==ARRAY) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public NoneNumberContext noneNumber() {
			return GetRuleContext<NoneNumberContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_value);
		try {
			State = 306;
			switch (TokenStream.La(1)) {
			case NONE_NUMBER_VALUES:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304; noneNumber();
				}
				break;
			case NUMBERS:
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305; number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JiahuScriptParser.ID, 0); }
		public ITerminalNode FUNCID() { return GetToken(JiahuScriptParser.FUNCID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			_la = TokenStream.La(1);
			if ( !(_la==FUNCID || _la==ID) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBERS() { return GetToken(JiahuScriptParser.NUMBERS, 0); }
		public SignContext sign() {
			return GetRuleContext<SignContext>(0);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 58, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			_la = TokenStream.La(1);
			if (_la==MINUS) {
				{
				State = 310; sign();
				}
			}

			State = 313; Match(NUMBERS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignContext : ParserRuleContext {
		public ITerminalNode MINUS() { return GetToken(JiahuScriptParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignContext sign() {
		SignContext _localctx = new SignContext(Context, State);
		EnterRule(_localctx, 60, RULE_sign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(MINUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoneNumberContext : ParserRuleContext {
		public ITerminalNode NONE_NUMBER_VALUES() { return GetToken(JiahuScriptParser.NONE_NUMBER_VALUES, 0); }
		public NoneNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noneNumber; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJiahuScriptVisitor<TResult> typedVisitor = visitor as IJiahuScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoneNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoneNumberContext noneNumber() {
		NoneNumberContext _localctx = new NoneNumberContext(Context, State);
		EnterRule(_localctx, 62, RULE_noneNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(NONE_NUMBER_VALUES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 23: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 22);
		case 1: return Precpred(Context, 21);
		case 2: return Precpred(Context, 19);
		case 3: return Precpred(Context, 18);
		case 4: return Precpred(Context, 17);
		case 5: return Precpred(Context, 16);
		case 6: return Precpred(Context, 15);
		case 7: return Precpred(Context, 14);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 2);
		case 12: return Precpred(Context, 13);
		case 13: return Precpred(Context, 12);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3>\x142\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x3\x2\x3\x2\x6\x2\x45\n\x2\r\x2\xE\x2\x46\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\a\x3M\n\x3\f\x3\xE\x3P\v\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4"+
		"X\n\x4\f\x4\xE\x4[\v\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6k\n\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x6\tz\n\t\r\t\xE\t{\x3\t\x5"+
		"\t\x7F\n\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x99"+
		"\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\xA3\n\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\xAA\n\xF\x3\x10\x3\x10\x6\x10\xAE\n"+
		"\x10\r\x10\xE\x10\xAF\x5\x10\xB2\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x5\x12\xBC\n\x12\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\xC6\n\x14\f\x14\xE\x14\xC9\v\x14\x3"+
		"\x14\x3\x14\x3\x15\x3\x15\x3\x15\x6\x15\xD0\n\x15\r\x15\xE\x15\xD1\x3"+
		"\x16\x3\x16\x5\x16\xD6\n\x16\x3\x17\x3\x17\x3\x17\x5\x17\xDB\n\x17\x3"+
		"\x17\x3\x17\x3\x18\x3\x18\x3\x18\a\x18\xE2\n\x18\f\x18\xE\x18\xE5\v\x18"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x5\x19\xF4\n\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x121"+
		"\n\x19\f\x19\xE\x19\x124\v\x19\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x129\n\x1A"+
		"\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x5\x1D\x135\n\x1D\x3\x1E\x3\x1E\x3\x1F\x5\x1F\x13A\n\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3!\x3!\x3!\x2\x3\x30\"\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18"+
		"\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x2\x6\x3\x2*+\x3\x2()\x3"+
		"\x2\x5\x6\x3\x2=>\x157\x2\x44\x3\x2\x2\x2\x4H\x3\x2\x2\x2\x6T\x3\x2\x2"+
		"\x2\b\\\x3\x2\x2\x2\nj\x3\x2\x2\x2\fl\x3\x2\x2\x2\xEq\x3\x2\x2\x2\x10"+
		"s\x3\x2\x2\x2\x12\x82\x3\x2\x2\x2\x14\x87\x3\x2\x2\x2\x16\x8B\x3\x2\x2"+
		"\x2\x18\x91\x3\x2\x2\x2\x1A\x9A\x3\x2\x2\x2\x1C\xA7\x3\x2\x2\x2\x1E\xAB"+
		"\x3\x2\x2\x2 \xB5\x3\x2\x2\x2\"\xB8\x3\x2\x2\x2$\xBD\x3\x2\x2\x2&\xC1"+
		"\x3\x2\x2\x2(\xCC\x3\x2\x2\x2*\xD5\x3\x2\x2\x2,\xD7\x3\x2\x2\x2.\xDE\x3"+
		"\x2\x2\x2\x30\xF3\x3\x2\x2\x2\x32\x128\x3\x2\x2\x2\x34\x12C\x3\x2\x2\x2"+
		"\x36\x130\x3\x2\x2\x2\x38\x134\x3\x2\x2\x2:\x136\x3\x2\x2\x2<\x139\x3"+
		"\x2\x2\x2>\x13D\x3\x2\x2\x2@\x13F\x3\x2\x2\x2\x42\x45\x5\n\x6\x2\x43\x45"+
		"\x5\x4\x3\x2\x44\x42\x3\x2\x2\x2\x44\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2"+
		"\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\x3\x3\x2\x2\x2HI\x5\x36\x1C"+
		"\x2IJ\x5:\x1E\x2JN\a#\x2\x2KM\x5\x6\x4\x2LK\x3\x2\x2\x2MP\x3\x2\x2\x2"+
		"NL\x3\x2\x2\x2NO\x3\x2\x2\x2OQ\x3\x2\x2\x2PN\x3\x2\x2\x2QR\a$\x2\x2RS"+
		"\x5\x1E\x10\x2S\x5\x3\x2\x2\x2TY\x5\b\x5\x2UV\a%\x2\x2VX\x5\b\x5\x2WU"+
		"\x3\x2\x2\x2X[\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\a\x3\x2\x2\x2"+
		"[Y\x3\x2\x2\x2\\]\x5\x36\x1C\x2]^\x5:\x1E\x2^\t\x3\x2\x2\x2_k\x5\x1E\x10"+
		"\x2`k\x5\f\a\x2\x61k\x5\xE\b\x2\x62k\x5\x10\t\x2\x63k\x5\x16\f\x2\x64"+
		"k\x5\x18\r\x2\x65k\x5\x1A\xE\x2\x66k\x5\x1C\xF\x2gk\x5$\x13\x2hk\x5\""+
		"\x12\x2ik\x5\x30\x19\x2j_\x3\x2\x2\x2j`\x3\x2\x2\x2j\x61\x3\x2\x2\x2j"+
		"\x62\x3\x2\x2\x2j\x63\x3\x2\x2\x2j\x64\x3\x2\x2\x2j\x65\x3\x2\x2\x2j\x66"+
		"\x3\x2\x2\x2jg\x3\x2\x2\x2jh\x3\x2\x2\x2ji\x3\x2\x2\x2k\v\x3\x2\x2\x2"+
		"lm\a\x12\x2\x2mn\a#\x2\x2no\x5\x30\x19\x2op\a$\x2\x2p\r\x3\x2\x2\x2qr"+
		"\a\x1B\x2\x2r\xF\x3\x2\x2\x2st\a\x16\x2\x2tu\a#\x2\x2uv\x5\x30\x19\x2"+
		"vw\a$\x2\x2wy\a\x1F\x2\x2xz\x5\x12\n\x2yx\x3\x2\x2\x2z{\x3\x2\x2\x2{y"+
		"\x3\x2\x2\x2{|\x3\x2\x2\x2|~\x3\x2\x2\x2}\x7F\x5\x14\v\x2~}\x3\x2\x2\x2"+
		"~\x7F\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x81\a \x2\x2\x81\x11\x3\x2\x2"+
		"\x2\x82\x83\a\x17\x2\x2\x83\x84\x5\x38\x1D\x2\x84\x85\a&\x2\x2\x85\x86"+
		"\x5\x1E\x10\x2\x86\x13\x3\x2\x2\x2\x87\x88\a\x18\x2\x2\x88\x89\a&\x2\x2"+
		"\x89\x8A\x5\x1E\x10\x2\x8A\x15\x3\x2\x2\x2\x8B\x8C\a\x15\x2\x2\x8C\x8D"+
		"\a#\x2\x2\x8D\x8E\x5\x30\x19\x2\x8E\x8F\a$\x2\x2\x8F\x90\x5\x1E\x10\x2"+
		"\x90\x17\x3\x2\x2\x2\x91\x92\a\x13\x2\x2\x92\x93\a#\x2\x2\x93\x94\x5\x30"+
		"\x19\x2\x94\x95\a$\x2\x2\x95\x98\x5\x1E\x10\x2\x96\x97\a\x14\x2\x2\x97"+
		"\x99\x5\x1E\x10\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x19\x3"+
		"\x2\x2\x2\x9A\x9B\a\x1A\x2\x2\x9B\x9C\a#\x2\x2\x9C\x9D\x5 \x11\x2\x9D"+
		"\xA2\a\x1C\x2\x2\x9E\xA3\x5&\x14\x2\x9F\xA3\x5(\x15\x2\xA0\xA3\x5,\x17"+
		"\x2\xA1\xA3\x5:\x1E\x2\xA2\x9E\x3\x2\x2\x2\xA2\x9F\x3\x2\x2\x2\xA2\xA0"+
		"\x3\x2\x2\x2\xA2\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a$\x2\x2"+
		"\xA5\xA6\x5\x1E\x10\x2\xA6\x1B\x3\x2\x2\x2\xA7\xA9\a\x19\x2\x2\xA8\xAA"+
		"\x5\x30\x19\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\x1D\x3\x2\x2"+
		"\x2\xAB\xB1\a\x1F\x2\x2\xAC\xAE\x5\n\x6\x2\xAD\xAC\x3\x2\x2\x2\xAE\xAF"+
		"\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB2\x3\x2\x2"+
		"\x2\xB1\xAD\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4"+
		"\a \x2\x2\xB4\x1F\x3\x2\x2\x2\xB5\xB6\x5\x36\x1C\x2\xB6\xB7\x5:\x1E\x2"+
		"\xB7!\x3\x2\x2\x2\xB8\xBB\x5 \x11\x2\xB9\xBA\a\x35\x2\x2\xBA\xBC\x5\x30"+
		"\x19\x2\xBB\xB9\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC#\x3\x2\x2\x2\xBD\xBE"+
		"\x5:\x1E\x2\xBE\xBF\a\x35\x2\x2\xBF\xC0\x5\x30\x19\x2\xC0%\x3\x2\x2\x2"+
		"\xC1\xC2\a\x1F\x2\x2\xC2\xC7\x5\x30\x19\x2\xC3\xC4\a%\x2\x2\xC4\xC6\x5"+
		"\x30\x19\x2\xC5\xC3\x3\x2\x2\x2\xC6\xC9\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2"+
		"\xC7\xC8\x3\x2\x2\x2\xC8\xCA\x3\x2\x2\x2\xC9\xC7\x3\x2\x2\x2\xCA\xCB\a"+
		" \x2\x2\xCB\'\x3\x2\x2\x2\xCC\xCF\x5:\x1E\x2\xCD\xCE\a\x36\x2\x2\xCE\xD0"+
		"\x5*\x16\x2\xCF\xCD\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2"+
		"\xD1\xD2\x3\x2\x2\x2\xD2)\x3\x2\x2\x2\xD3\xD6\x5,\x17\x2\xD4\xD6\x5:\x1E"+
		"\x2\xD5\xD3\x3\x2\x2\x2\xD5\xD4\x3\x2\x2\x2\xD6+\x3\x2\x2\x2\xD7\xD8\x5"+
		":\x1E\x2\xD8\xDA\a#\x2\x2\xD9\xDB\x5.\x18\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB"+
		"\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDD\a$\x2\x2\xDD-\x3\x2\x2\x2\xDE"+
		"\xE3\x5\x30\x19\x2\xDF\xE0\a%\x2\x2\xE0\xE2\x5\x30\x19\x2\xE1\xDF\x3\x2"+
		"\x2\x2\xE2\xE5\x3\x2\x2\x2\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3\x2\x2\x2\xE4"+
		"/\x3\x2\x2\x2\xE5\xE3\x3\x2\x2\x2\xE6\xE7\b\x19\x1\x2\xE7\xE8\a.\x2\x2"+
		"\xE8\xF4\x5\x30\x19\x16\xE9\xF4\x5,\x17\x2\xEA\xF4\x5(\x15\x2\xEB\xF4"+
		"\x5:\x1E\x2\xEC\xF4\x5\x38\x1D\x2\xED\xF4\x5\x32\x1A\x2\xEE\xF4\x5&\x14"+
		"\x2\xEF\xF0\a#\x2\x2\xF0\xF1\x5\x30\x19\x2\xF1\xF2\a$\x2\x2\xF2\xF4\x3"+
		"\x2\x2\x2\xF3\xE6\x3\x2\x2\x2\xF3\xE9\x3\x2\x2\x2\xF3\xEA\x3\x2\x2\x2"+
		"\xF3\xEB\x3\x2\x2\x2\xF3\xEC\x3\x2\x2\x2\xF3\xED\x3\x2\x2\x2\xF3\xEE\x3"+
		"\x2\x2\x2\xF3\xEF\x3\x2\x2\x2\xF4\x122\x3\x2\x2\x2\xF5\xF6\f\x18\x2\x2"+
		"\xF6\xF7\a\x34\x2\x2\xF7\x121\x5\x30\x19\x19\xF8\xF9\f\x17\x2\x2\xF9\xFA"+
		"\a/\x2\x2\xFA\x121\x5\x30\x19\x18\xFB\xFC\f\x15\x2\x2\xFC\xFD\a\x33\x2"+
		"\x2\xFD\x121\x5\x30\x19\x16\xFE\xFF\f\x14\x2\x2\xFF\x100\a\x30\x2\x2\x100"+
		"\x121\x5\x30\x19\x15\x101\x102\f\x13\x2\x2\x102\x103\a\x32\x2\x2\x103"+
		"\x121\x5\x30\x19\x14\x104\x105\f\x12\x2\x2\x105\x106\a\x31\x2\x2\x106"+
		"\x121\x5\x30\x19\x13\x107\x108\f\x11\x2\x2\x108\x109\a\x39\x2\x2\x109"+
		"\x121\x5\x30\x19\x12\x10A\x10B\f\x10\x2\x2\x10B\x10C\a\x38\x2\x2\x10C"+
		"\x121\x5\x30\x19\x11\x10D\x10E\f\r\x2\x2\x10E\x10F\a\'\x2\x2\x10F\x110"+
		"\x5\x30\x19\x2\x110\x111\a&\x2\x2\x111\x112\x5\x30\x19\xE\x112\x121\x3"+
		"\x2\x2\x2\x113\x114\f\f\x2\x2\x114\x115\t\x2\x2\x2\x115\x121\x5\x30\x19"+
		"\r\x116\x117\f\v\x2\x2\x117\x118\t\x3\x2\x2\x118\x121\x5\x30\x19\f\x119"+
		"\x11A\f\x4\x2\x2\x11A\x11B\a\x37\x2\x2\x11B\x121\x5\x30\x19\x5\x11C\x11D"+
		"\f\xF\x2\x2\x11D\x121\a,\x2\x2\x11E\x11F\f\xE\x2\x2\x11F\x121\a-\x2\x2"+
		"\x120\xF5\x3\x2\x2\x2\x120\xF8\x3\x2\x2\x2\x120\xFB\x3\x2\x2\x2\x120\xFE"+
		"\x3\x2\x2\x2\x120\x101\x3\x2\x2\x2\x120\x104\x3\x2\x2\x2\x120\x107\x3"+
		"\x2\x2\x2\x120\x10A\x3\x2\x2\x2\x120\x10D\x3\x2\x2\x2\x120\x113\x3\x2"+
		"\x2\x2\x120\x116\x3\x2\x2\x2\x120\x119\x3\x2\x2\x2\x120\x11C\x3\x2\x2"+
		"\x2\x120\x11E\x3\x2\x2\x2\x121\x124\x3\x2\x2\x2\x122\x120\x3\x2\x2\x2"+
		"\x122\x123\x3\x2\x2\x2\x123\x31\x3\x2\x2\x2\x124\x122\x3\x2\x2\x2\x125"+
		"\x129\x5:\x1E\x2\x126\x129\x5,\x17\x2\x127\x129\x5(\x15\x2\x128\x125\x3"+
		"\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128\x127\x3\x2\x2\x2\x129\x12A\x3\x2"+
		"\x2\x2\x12A\x12B\x5\x34\x1B\x2\x12B\x33\x3\x2\x2\x2\x12C\x12D\a!\x2\x2"+
		"\x12D\x12E\x5\x30\x19\x2\x12E\x12F\a\"\x2\x2\x12F\x35\x3\x2\x2\x2\x130"+
		"\x131\t\x4\x2\x2\x131\x37\x3\x2\x2\x2\x132\x135\x5@!\x2\x133\x135\x5<"+
		"\x1F\x2\x134\x132\x3\x2\x2\x2\x134\x133\x3\x2\x2\x2\x135\x39\x3\x2\x2"+
		"\x2\x136\x137\t\x5\x2\x2\x137;\x3\x2\x2\x2\x138\x13A\x5> \x2\x139\x138"+
		"\x3\x2\x2\x2\x139\x13A\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x13C\a\x3"+
		"\x2\x2\x13C=\x3\x2\x2\x2\x13D\x13E\a)\x2\x2\x13E?\x3\x2\x2\x2\x13F\x140"+
		"\a\x4\x2\x2\x140\x41\x3\x2\x2\x2\x1A\x44\x46NYj{~\x98\xA2\xA9\xAF\xB1"+
		"\xBB\xC7\xD1\xD5\xDA\xE3\xF3\x120\x122\x128\x134\x139";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
